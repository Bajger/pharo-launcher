# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events
  push:
  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PHARO: 100
  ARCHITECTURE: 64
  VM: vm

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set environment
        run: | 
          echo GITHUB_REF_NAME = ${GITHUB_REF_NAME}
          echo GITHUB_SHA = ${GITHUB_SHA}
          echo GITHUB_WORKSPACE = $GITHUB_WORKSPACE
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo SHORT_SHA = ${SHORT_SHA}
          echo "LAUNCHER_VERSION=$(eval 'git describe --tags --always')" >> $GITHUB_ENV
          echo LAUNCHER_VERSION = $LAUNCHER_VERSION
      - name: Build and test
        run: |
          VERSION=${SHORT_SHA} ./build.sh prepare
          VERSION=${SHORT_SHA} ./build.sh test

      - uses: actions/upload-artifact@v2  # upload test results
        if: success() || failure()        # run this step even if previous step failed
        with:
            name: test-results
            path: ./*.xml

      - name: Test report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Pharo Launcher Tests        # Name of the check run which will be created
          path: ./*.xml                     # Path to test results
          reporter: java-junit              # Format of test results
          fail-on-error: 'false'            # need to go further in the pipeline setup

      - name: Make Pharo Launcher deployed
        if: success() || failure()    # run this step even if previous step failed
        run: |
          ./pharo PharoLauncher.image eval --save "PhLDeploymentScript doAll"
          ./pharo PharoLauncher.image eval --save "PhLAboutCommand version: '$LAUNCHER_VERSION'"  
          # Avoid to have PL core dir set to the slave location and having an outdated list of templates
          ./pharo PharoLauncher.image eval --save \
              "PhLTemplateSources resetLauncherCoreDir.
              PharoLauncherApplication resetTemplateRepository.
              PhLDeploymentScript resetPharoLauncherIcebergRepositoryLocation"

      - uses: actions/upload-artifact@v2
        if: success() || failure()    # run this step even if previous step failed
        with:
            name: packaging-user
            path: |
              PharoLauncher.image
              PharoLauncher.changes
              Pharo*.sources

      - name: Linux packaging
        if: success() || failure()    # run this step even if previous step failed
        run: VERSION=${SHORT_SHA} ./build.sh linux-package

      - uses: actions/upload-artifact@v2
        if: success() || failure()    # run this step even if previous step failed
        with:
            name: PharoLauncher-linux-${{ env.SHORT_SHA }}
            path: |
              build/